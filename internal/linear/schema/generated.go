// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package schema

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// GetAssignedIssuesResponse is returned by GetAssignedIssues on success.
type GetAssignedIssuesResponse struct {
	// The currently authenticated user.
	Viewer GetAssignedIssuesViewerUser `json:"viewer"`
}

// GetViewer returns GetAssignedIssuesResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesResponse) GetViewer() GetAssignedIssuesViewerUser { return v.Viewer }

// GetAssignedIssuesViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type GetAssignedIssuesViewerUser struct {
	// Issues assigned to the user.
	AssignedIssues GetAssignedIssuesViewerUserAssignedIssuesIssueConnection `json:"assignedIssues"`
}

// GetAssignedIssues returns GetAssignedIssuesViewerUser.AssignedIssues, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUser) GetAssignedIssues() GetAssignedIssuesViewerUserAssignedIssuesIssueConnection {
	return v.AssignedIssues
}

// GetAssignedIssuesViewerUserAssignedIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
type GetAssignedIssuesViewerUserAssignedIssuesIssueConnection struct {
	Nodes []GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue `json:"nodes"`
}

// GetNodes returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnection) GetNodes() []GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue {
	return v.Nodes
}

// GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier string `json:"identifier"`
	// The issue's title.
	Title string `json:"title"`
	// Issue URL.
	Url string `json:"url"`
	// The date at which the issue is due.
	DueDate string `json:"dueDate"`
	// The time at which the entity was created.
	CreatedAt string `json:"createdAt"`
	// The project that the issue is associated with.
	Project GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject `json:"project"`
	// The workflow state that the issue is associated with.
	State GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState `json:"state"`
	// The user to whom the issue is assigned to.
	Assignee GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser `json:"assignee"`
}

// GetId returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Id, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetId() string {
	return v.Id
}

// GetIdentifier returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Identifier, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetIdentifier() string {
	return v.Identifier
}

// GetTitle returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Title, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetTitle() string {
	return v.Title
}

// GetUrl returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Url, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetUrl() string {
	return v.Url
}

// GetDueDate returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.DueDate, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetDueDate() string {
	return v.DueDate
}

// GetCreatedAt returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetCreatedAt() string {
	return v.CreatedAt
}

// GetProject returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Project, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetProject() GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject {
	return v.Project
}

// GetState returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.State, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetState() GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState {
	return v.State
}

// GetAssignee returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue.Assignee, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssue) GetAssignee() GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser {
	return v.Assignee
}

// GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The user's full name.
	Name string `json:"name"`
	// The user's display (nick) name. Unique within each organization.
	DisplayName string `json:"displayName"`
}

// GetId returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser.Id, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser) GetId() string {
	return v.Id
}

// GetName returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser.Name, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser) GetName() string {
	return v.Name
}

// GetDisplayName returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser.DisplayName, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueAssigneeUser) GetDisplayName() string {
	return v.DisplayName
}

// GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// A project.
type GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The project's name.
	Name string `json:"name"`
	// The estimated completion date of the project.
	TargetDate string `json:"targetDate"`
}

// GetId returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject.Id, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject) GetId() string {
	return v.Id
}

// GetName returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject.Name, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject) GetName() string {
	return v.Name
}

// GetTargetDate returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject.TargetDate, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueProject) GetTargetDate() string {
	return v.TargetDate
}

// GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The type of the state. One of "triage", "backlog", "unstarted", "started", "completed", "canceled".
	Type string `json:"type"`
}

// GetId returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState) GetId() string {
	return v.Id
}

// GetType returns GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *GetAssignedIssuesViewerUserAssignedIssuesIssueConnectionNodesIssueStateWorkflowState) GetType() string {
	return v.Type
}

// The query executed by GetAssignedIssues.
const GetAssignedIssues_Operation = `
query GetAssignedIssues {
	viewer {
		assignedIssues(filter: {state:{type:{nin:["completed","canceled"]}}}) {
			nodes {
				id
				identifier
				title
				url
				dueDate
				createdAt
				project {
					id
					name
					targetDate
				}
				state {
					id
					type
				}
				assignee {
					id
					name
					displayName
				}
			}
		}
	}
}
`

// file: internal/linear/schema/operations.graphql
// This query fetches the ID, identifier (like ENG-123), and title
// for all issues assigned to the currently authenticated user (viewer).
func GetAssignedIssues(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetAssignedIssuesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetAssignedIssues",
		Query:  GetAssignedIssues_Operation,
	}

	data_ = &GetAssignedIssuesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
